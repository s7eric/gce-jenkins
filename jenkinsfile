pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build')
        string(name: 'GIT_URL', defaultValue: 'git@github.com:s7eric/gce-jenkins.git', description: 'Git_url to build')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests after cloning')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'Select deployment environment')
        string(name: 'NGINX_PORT', defaultValue: '80', description: 'Port for Nginx test server')
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }

    environment {
        // Global environment variables
        APP_NAME = 'my-application'
        VERSION = "${BUILD_NUMBER}"
        NGINX_CONTAINER_NAME = "test-nginx-${BUILD_NUMBER}"
        SONAR_HOST_URL = "http://3.87.145.212:9000"
        SCANNER_HOME = tool 'sonar' // Define the SonarQube scanner tool
        DOCKER_REPO = "s7eric/docker-eric-royce"
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    git branch: params.BRANCH_NAME, credentialsId: 'ssh-agent', url: params.GIT_URL
                }
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "Running SonarQube analysis..."
                    withSonarQubeEnv('sonar') {
                        withCredentials([string(credentialsId: 'sonar-id', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=${APP_NAME} \
                                -Dsonar.projectName=${APP_NAME} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_TOKEN}
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    
    
                    
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_REPO}:${params.DOCKER_TAG} ."
                }
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                script {
                    echo "Pushing Docker image to DockerHub..."
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${DOCKER_REPO}:${params.DOCKER_TAG}"
                    }
                }
            }
        }
        
        stage('Setup Test Environment') {
            steps {
                script {
                    echo "Setting up Nginx test environment..."
                    
                    // Using the Docker image we just built and pushed
                    sh "docker pull ${DOCKER_REPO}:${params.DOCKER_TAG}"
                    sh "docker run -d -p ${params.NGINX_PORT}:80 --name ${NGINX_CONTAINER_NAME} ${DOCKER_REPO}:${params.DOCKER_TAG}"
                    
                    echo "Nginx test server started at http://localhost:${params.NGINX_PORT}"
                }
            }
        }

        stage('Run Tests') {
            when {
                expression { params.RUN_TESTS }
            }
            steps {
                script {
                    echo "Running tests for ${params.ENVIRONMENT} environment..."
                    
                    // Wait for Nginx to be ready
                    sh "sleep 5"
                    
                    // Run basic health check
                    sh "curl -s -o /dev/null -w '%{http_code}' http://localhost:${params.NGINX_PORT} | grep 200"
                    
                    echo "Basic tests completed successfully"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "Deploying to ${params.ENVIRONMENT} environment..."
                    
                    // Environment-specific deployment steps
                    switch(params.ENVIRONMENT) {
                        case 'dev':
                            echo "Running dev-specific deployment steps with image ${DOCKER_REPO}:${params.DOCKER_TAG}..."
                            // sh "deploy_script.sh --env=dev --image=${DOCKER_REPO}:${params.DOCKER_TAG}"
                            break
                        case 'staging':
                            echo "Running staging-specific deployment steps with image ${DOCKER_REPO}:${params.DOCKER_TAG}..."
                            // sh "deploy_script.sh --env=staging --image=${DOCKER_REPO}:${params.DOCKER_TAG}"
                            break
                        case 'prod':
                            echo "Adding approval step for production deployment"
                            // Production deployment might need additional steps like manual approval
                            // sh "deploy_script.sh --env=prod --image=${DOCKER_REPO}:${params.DOCKER_TAG}"
                            break
                    }
                }
            }
        }

        stage('Post-Deploy Verification') {
            steps {
                script {
                    echo "Verifying deployment on ${params.ENVIRONMENT}..."
                    // sh "verify_deployment.sh --env=${params.ENVIRONMENT} --image=${DOCKER_REPO}:${params.DOCKER_TAG}"
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker resources
            sh "docker stop ${NGINX_CONTAINER_NAME} || true"
            sh "docker rm ${NGINX_CONTAINER_NAME} || true"
        }
        success {
            echo "Pipeline executed successfully! Application deployed to ${params.ENVIRONMENT}."
        }
        failure {
            echo "Pipeline failed! Check the logs for details."
        }
    }
}